0. Overview

1.A What is program induction?
1.B The ability to generate, replicate or infer code using a computer.

2. The Plan
2.A NOW: Write programs for computer to execute
2.B RESEARCH: Use data to develop models for writing programs
2.C DREAM: Let the computer write and execute its own program

3.A Example: Data from Star Trek sometimes writes programs to compute various results and subroutines for specific behavior.

3.B As follow-up, we can imagine that in order to achieve this task (100%) we would need machines capable of thinking, however...

THIS IS WHAT WE CAN DO TODAY

4. Chapters

4.A Machine learning overview

Computer Vision

Train with images to infer image properties:

- T1.hand-written digit recognition
- T2.object detection
- T3.segmentation

Natural Language Processing

Train with text to infer text properties

- T4.spam detection
- T5.sentiment analysis
- T6.translation

Program Induction

Train with code/IO pairs to infer code/IO pairs

- T7.program synthesis
- T8.neural programming
- T9.software applications:
	- defect prediction
	- semantics extraction, grouping
	- target areas

======================
Down to here 10 topics

Models and Tools (Concepts)

C1.Multi-layer perceptron
C2.Gradient descent
C3.Loss functions
C4.Activations
C5.Backpropagation
C6.Convolutions
C7.Recurrences

4.B Frameworks for applications (program induction)

Present some papers

P1. DeepCoder (search speed-up using inference of program attributes)
	- specify domain specific language
	- encoding input-output pairs
	- map input/output pairs to program attributes
	- narrow program search using predicted program attributes

P2. Aster Project 
	- abstract syntax trees
	- reverse polish notation
	- encoding variable names
	- author, task, project, bug detection

P3. The one with program tree expansion
P4. Pix2Code
P5. Stockholm Project
P6. The one with spec to code

=============== (ADVANCED)
A7. The one with visual objects relations
A8. The one with differentiable memory

4.C Tools for solving such problems (tensorflow, models)

Present some models (brief theory, tensorflow/keras implementation)

M1. MLP
	- formula, layers
	- input
	- Wx + b
	- activation
	- output
	- fully connected (dense)
M2. CNN
M3. LSTM

======================
By topics: Down to here 26 topics => ~3.5 minutes on average per topic
6 section strategy => 15 min/section (2.3 topics/section)

TEST: how much can you write/present for each topic in 3.5 mins, then adjust accordingly

Plan for:
10h running nn programs (8 left)
4h writing presentation (3 left)
2h taking the test (1 left)
2h compose presentation DONE
2h whatever DONE

Feedback:
- write summaries, instead of hard teaching
- make a presentation
- skip tensorflow (- a lot)
- add pictures for ml overview (2 slides)
- get to program induction
- watch 2 min papers