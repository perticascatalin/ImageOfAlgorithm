0. Overview

1.A What is program induction?
1.B The ability to generate, replicate or infer code using a computer.

2. The Plan
2.A NOW: Write programs for computer to execute
2.B RESEARCH: Use data to develop models for writing programs
2.C DREAM: Let the computer write and execute its own program

3.A Example: Data from Star Trek sometimes writes programs to compute various results and subroutines for specific behavior.

3.B As follow-up, we can imagine that in order to achieve this task (100%) we would need machines capable of thinking, however...

THIS IS WHAT WE CAN DO TODAY

4. Chapters

4.A Machine learning overview

Computer Vision

Train with images to infer image properties:

- T1.hand-written digit recognition
- T2.object detection
- T3.segmentation

Natural Language Processing

Train with text to infer text properties

- T4.spam detection
- T5.sentiment analysis
- T6.translation

Program Induction

Train with code/IO pairs to infer code/IO pairs

- T7.program synthesis
- T8.neural programming
- T9.software applications:
	- defect prediction
	- semantics extraction, grouping
	- target areas

======================
Down to here 10 topics

Models and Tools (Concepts)

C1.Multi-layer perceptron
C2.Gradient descent
C3.Loss functions
C4.Activations
C5.Backpropagation
C6.Convolutions
C7.Recurrences

4.B Frameworks for applications (program induction)

Present some papers

P1. DeepCoder (search speed-up using inference of program attributes)
	- specify domain specific language
	- encoding input-output pairs
	- map input/output pairs to program attributes
	- narrow program search using predicted program attributes

P2. Aster Project 
	- abstract syntax trees
	- reverse polish notation
	- encoding variable names
	- author, task, project, bug detection

P3. The one with program tree expansion - added
P4. Pix2Code
P5. Stockholm Project
P6. The one with spec to code - added

=============== (ADVANCED)
A7. The one with visual objects relations
A8. The one with differentiable memory

4.C Tools for solving such problems (tensorflow, models)

Present some models (brief theory, tensorflow/keras implementation)

M1. MLP
	- formula, layers
	- input
	- Wx + b
	- activation
	- output
	- fully connected (dense)
M2. CNN
M3. LSTM

======================
By topics: Down to here 26 topics => ~3.5 minutes on average per topic
6 section strategy => 15 min/section (2.3 topics/section)

TEST: how much can you write/present for each topic in 3.5 mins, then adjust accordingly

Plan for:
4h writing speech (4 left)
2h detail presentation (2 left)
4h writing presentation DONE
2h running nn programs DONE
2h taking the test DONE
2h compose presentation DONE
2h whatever DONE

Feedback:
- write summaries, instead of hard teaching
- make a presentation (doing)
- skip tensorflow (- a lot)
- add pictures for ml overview (2 slides)
- get to program induction
- watch 2 min papers

Side Slide (to guide narrative)

Slide 1: The Journey

Slide 2: Program Representation [carrying out complex calculations]

Poster
R2D2
Code -> Data -> Code
Big Data

Slide 3: Learning to Code [creating mechanisms for complex calculations]

Getting a Sense of Humour
The Holodeck

The 4 Paper Slides (finish this in 2 hours)

- 2 to review (1h)
- 2 to understand (1h)

another 4 pages

The Speech

- write for program representation (1h write 300 words that link well)
- write for learning to code (1h write 300 words that link well)
- links, resources, conclusions
- tensorflow & models

2 pages tensorflow and models
1 page resources

In total 14 pages
With an average of 2 minutes per page, you will need intro (what program induction is) + 600 words for introductory part.