# Review

## 1. Overview and Structure

1. Introduction and Motivation
2. Background on Program Induction
3. Image of Algorithm
4. Program Classification
5. Pattern Detection in Sequences
6. Algorithm Prediction and Behavior Emulation
7. Discussion and Related Research
8. Conclusions
9. Future Work and Applications
10. Acknowledgement

Steps in review (Planning):

1. Fix minor and medium feedback items (1/2 done)
2. Read suggested papers
3. Discuss changes with co-author
	- abstract/introduction more concise wrt to the paper overview - Bipin
	- point out feedback wrt to the paper overview - Catalin
4. Restructure, more major feedback items, in any order (address each major feedback item separately)

## 2. Small Issues

1. fix "of of"
2. labels with two ":"
3. rephrase "Array does not - the data does" ???? -> However, the input data does not have an influence on the strategy of the algorithm while reversing an array.
4. fix "of a program - [5]" -> of a program [5]
5. fix reference to tables 1, 5, 6 & 8
6. fix "Heapsort in 7? What is this seven?"
7. proof reading
8. legend for fix types
9. re-representation -> This allows showcasing different set-ups complexities and improvements based on the data representation type and by designing better models of program induction.
10. "The type of a new previously unseen program can be predicted", explain why is this important -> This could prove relevant in deciding what type of problem the program solves and which aspects of the input data have a higher influence on the output data of the program.

## 3. Suggested Reads

1. Ma, K. L. (2007). Machine learning to boost the next generation of visualization technology

2. Hayes, J. H., Li, W., & Rahimi, M. (2014). Weka meets TraceLab: Toward convenient classification: Machine learning for requirements engineering problems

3. F. Fittkau, S. Finke, W. Hasselbring and J. Waller, "Comparing Trace Visualizations for Program Comprehension through Controlled Experiments,"

- a programmer receives a task: eg. to refactor or understand a login process
- compare 2 visualization programs
- metrics are:
	- time spent on task (minutes)
	- corectness of solution (points)
- the tasks were quite interesting here

4. H. N. Huang, E. Verbeek, D. German, M. Storey and M. Salois, "Atlantis: Improving the Analysis and Visualization of Large Assembly Execution Traces,"

5. M. D. Shah and S. Z. Guyer, "Critical Section Investigator: Building Story Visualizations with Program Traces,"

6. City Metaphor

- CodeCity
- ExplorViz

## 4. Major Issues

1. Abstract & Introduction
	- 1st page of review, blue comments - Bipin
	- for myself, need to revise literature and define problem + show objective based on literature

2. Objective	
	- objective is to find how to model algorithms using neural networks
	- start from the sensorimotor view (moving objects around)
	- programs are similar to moving objects around
	- neural networks are in fact programs (eg. recognizing a face)
	- but these programs are not hardcoded
	- can we use them to infer more abstract programs?

## 5. Comments in Overleaf and other Ideas

% Catalin C1: this sounds too abstract and vague, maybe stick to predicting program classes and future steps for sorting algorithms and other simple problems such as reversing, swapping intervals, heaps and binary search trees by observing their execution traces. - rephrase

Define Experiments for Cellular Automata - practical (check notebook for some ideas)

8 greens/140